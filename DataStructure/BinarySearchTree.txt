
二元搜尋樹（Binary Search Tree）

1. 每個節點都擁有不同的值
2. 每個節點都有以下特性：左值 < 自己 < 右值
3. 每個節點的左、右子樹也是 BST

——

搜尋：

由於定義的特性，可以只往左或往右走繼續搜尋直到找到

—-

刪除：

1. 刪除節點是 leaf 的話，只需刪除並修改 parent 的指標即可

2. 刪除節點只包含左或右子樹，將其子樹直接作為 parent 的左或右子樹即可

3. 刪除節點擁有左、右子樹，從其左子數中找最大值（不斷向右找直到 right 為 NULL）
   找到後 (1) 若沒有 child，則直接取代刪除節點；
   (2) 若有，則將其「左」子樹移到此「取代節點」parent 的 right
   （因是最大值，故只會存在有、無左子樹兩種情況）

—-

插入：

1. 若 root 是空的，那麼將其填入 root

2. 若碰到相同的值，則不做插入

3. 將其持續比較，並依比較結果往左子樹或右子樹填入

——

