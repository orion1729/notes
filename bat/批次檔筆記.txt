  批次檔或命令列當中並沒有大小寫的區分。

  可在命令提示中使用「指令 /?」來看詳細參數說明。

1. echo
  可印出訊息

  echo off可使系統不再顯示將要執行的完整命令
  （對於後面的指令而言）

  @放在某指令前，可以在此行達到echo off的效果
  因此若在開頭放上「@echo off」可達到整個bat檔都不會顯示出指令

  「echo.」可達到印出空一行的效果


2. rem
  等同於註解的效果


3. pause
  使批次檔暫停，系統會顯示「請按任意鍵繼續. . .」


4. title
  使該提示命令視窗的標題改變


5. color
  參數為兩個十六進位數字（0 ~ f）
  第一個數字改變背景色，第二個改變字體顏色
  0 = 黑色    4 = 紅色    8 = 灰色    C = 淡紅色
  1 = 藍色    5 = 紫色    9 = 淡藍色  D = 淡紫色
  2 = 綠色    6 = 黃色    A = 淡綠色  E = 淡黃色
  3 = 藍綠色  7 = 白色    B = 淡藍綠  F = 亮白色


6. prompt
  可以改變命令提示字元（預設是目前所在路徑 + 一個">"字元）
  （如 - C:\>）

  有特定參數可用
  $A &         $G >                       $S  （空格）
  $B |         $H back（消除前一個字元）  $T 目前時間
  $C (         $L <                       $V Windows版本編號
  $D 目前日期  $N 目前磁碟機              $_ 換行
  $E ASCII 27  $P 目前磁碟機與路徑        $$ $
  $F )         $Q =


7. 參數
  在命令列執行批次檔時，可以加上參數
  %0參數一定是檔名，後面還可以跟9個參數


8. shift [/n]
  用來做參數移動，n表示被蓋掉的參數位置，其後的每一個參數均往前一位

  若沒有加入參數，則n = 1


9. set
  顯示、設定、移除環境變數

  - set
    無參數，則顯示目前的環境變數

  - set [string]
    把以[string]為開頭的環境變數列出來
    （等號 = 並非變數名稱的一部份）

  - set [variable=[string]]
    設定變數名稱與變數字串內容
    variable的位置放變數名稱，[string]為字串內容

  - set /a expression
    可用來做數學運算 + - * / %
    !（NOT）, ~（取補數）, -（變負數）
    =, *=, /=, %=, +=, -=
    在提示命令中會顯示結果，批次檔中不會

  - set /p variable=[promptString]
    可以設定一個變數，接收使用者輸入的東西（以Enter按下為主）
    [promptString]為提供給使用者的輸入提示字串
  
  若要使用環境變數時，用「%變數名稱%」即可

  擴充的取用格式「%變數名稱:~[數值1],[數值2]%」
  - [數值1]
    用來移動取字的位置，正值向右移動、負值則向左（頭尾會循環）
    若在[數值2]未指定的情況下，會自動從移動完的位置向右取字

  - [數值2]
    決定取字的方向與字數，起始點由[數值1]移動後的位置而定
    正值向右取字、負值向左取字

  有些環境變數會被動態的計算，且不會顯示在環境變數的列表
  %CD% - 目前目錄的字串
  %DATE% - 目前日期的字串
  %TIME% - 目前時間的字串
  %RANDOM% - 一個在0 ~ 32767之間的值
  %ERRORLEVEL% - 目前ERRORLEVEL的值
  %CMDEXTVERSION% - 命令處理的擴充功能版本號碼
  %CMDCMDLINE% - 執行命令處理的命令


10. setlocal
  在批次檔執行結束後，使得環境變數回復到setlocal之前的狀態
  可搭配endlocal作還原，但批次檔執行結束會自動發出endlocal


11. if
  格式「if [/i] [not] condition (指令群1) else (指令群2)」
  [/i]表示字串比較時，不區分大小寫
  ()括號可以囊括一系列的指令，可跨行寫，類似其他程式語言中的{}

  condition種類
  - ERRORLEVEL n
  - 字串比較
  - exist 檔名
  - CMDEXTVERSION n
  - define 變數名稱
    指定的環境變數是否存在
  - compare
    EQU : =, NEQ : !=
    LSS : <, LEQ : <=
    GTR : >, GEQ : >=


12. for
  格式「FOR [ , /D, /L] %variable IN (set) DO (command[command-parameters])」

  注意在批次檔中，變數需使用%%variable才行
  
  (set)中的分隔可用「 （空格）」、「,」、「;」來區隔
  字串中可使用萬用字元「*」

  FOR後面不加任何參數時，對象為檔案
  /D則是以資料夾為對象
  /L則是loop的方式，(set)的格式為「(start, step, end)」


13. goto
  可跳至指定標籤，該標籤宣告時需單獨一行，且最前面要有「:」，大小寫不區分

  :EOF可跳至檔案結束的地方


14. call
  可執行其他程式，也可用於跳躍到指定標籤（但此時有return效果）


15. start
  在另一個視窗中執行指定程式或命令

  「start ["title"] [/D path] [/i] [/min] [/max] [/separate, /shared] [/low, /normal, /high, /realtime, /aboveNormal,
    belowNormal] [/wait] [/b] [command or program] [parameters]」


16. PUSHD
  將目前目錄存起來，以供POPD使用，並且切換到指定目錄
  （用stack概念來理解）


17. POPD
  將目錄從stack中拿出來，並切換過去


----------------------------

特殊字元

@：該字元起頭的命令皆會被隱藏

>：會以建立新檔的方式，將>左邊的內容寫入右邊的檔名當中
   利用type filename可以將檔案內容印出來

>>：此符號可以接續的寫入檔案中

<：可將右邊的檔案內容，導入到左邊的命令中

多方向：
  命令 > 輸出檔
  命令 > 輸入檔
  命令 < 輸入檔 > 輸出檔
  命令 > 輸出檔 < 輸入檔

系統保留字：CON, AUX, COM1, COM2, COM3, COM4, LPT1, LPT2, LPT3, PRN, NUL

CON：配合copy, type時，將命令視窗變為臨時記事本
     「copy con filename」、「type con > filename」、「type con >> filename」
     在畫面上輸入的文字就會被存到檔案中

NUL：用來隱藏程式執行的結果
     「echo hello! > nul」

|：可把命令或程式串起來處理
   「echo | set /a 1+2+3+4+5」
   可利用find, sort, more等等

&：可把多行指令連結成一行，執行順序由左至右