
分割法（Partitioning）

1. 固定分割（Fixed Partitioning）
	將記憶體分割為大小相同的區塊，每個區塊可以載入一個程式來執行，
	這些區塊會在一開始就被決定了，作業系統利用表格將這些區塊的起始位置和長度記錄起來。
	由於程式大小不一的特性，造成每個區塊中會有無人使用的片段（fragmentation）產生，
	在固定分割中會將此 fragmentation 稱為 internal fragmentation。

2. 動態分割（Dynamic Partitioning）
	當有程式要執行時才切割符合其大小的記憶體給他，同樣作業系統通過表格記錄起始與長度。
	在動態分割當中有時會出現剩餘大小足夠供給一個程式，
	但因為這些空間是其他分割所剩的瑣碎空間，不是連續的，因此無法提供給程式使用，
	這些瑣碎空間被稱為 external fragmentation。

——

分頁法（Paging）

由於分割法不可避免地產生片段，為了解決這樣的情況就允許程式在不連續的區間上執行。

首先將記憶體切割為大小相同的區塊，被稱為頁框（frame）；
同樣地，我們也將程式切割為許多相同大小的區段，稱為分頁（page）。
兩者通常是一樣大的。

當程式要執行時，每個 page 會被指派到一個 frame 中，
這個 frame 可以是不連續且分散的。

作業系統會利用一個分頁表（page table）來記錄一個程式其 page 的位置。

—-

分段法（Segmentation）

很類似分頁法，差別在於分段法切割的大小不像分頁法都切一樣大，
而是會將程式的邏輯記憶體切成數個分段，每個分段的大小可能不同，
並利用 <分段編號, offset> 來表示邏輯位址。

會利用一個分段表（segment table）來記錄程式位置。

——

虛擬記憶體（Virtual Memory）

主要是利用到了額外的儲存空間（如 disk）來作為記憶體的延伸，
由於一個程式不可能同時使用所有記憶體區塊，
因此那些較少使用的部分就能轉移到額外儲存空間儲存，
但仍然被視為是記憶體的一部分（虛擬記憶體從此而來）。

當程式需要用到那些放在額外空間的區塊時，
此時管理機制會將那些區塊從外部空間讀回記憶體當中讓程式執行。

這個拿到外部空間或從外部空間拿回來的動作稱為 swap，
而那些被用來作為虛擬記憶體的磁碟檔案被稱為 swap file。

——

需求分頁法（Demand Paging）

基本上就是分頁法與虛擬記憶體的結合，
可以簡單看成虛擬記憶體的每個單位都變成了 page。

因此會有 page fault 的發生。

——

需求分段法（Demand Segmentation）

類似前面的需求分頁法，只是變成虛擬記憶體與分段法的結合。

